#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2024, ZPE Systems <zpesystems.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# Make coding more python3-ish, this is required for contributions to Ansible
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

from jinja2 import (
    Environment,
    TemplateError
)
from typing import Dict, Union, Tuple

EXEC_COMMAND_TEMPLATE = """\
#!/bin/bash

{{ command }}

"""

PUT_FILE_TEMPLATE = """"\
#!/usr/bin/env python3

import base64
import zipfile

dst_dir = "{{ out_path }}"
zip_enc_file_path = "/tmp/ansible_tmp_encoded"

def decode_file(encoded_str):
    try:
        decoded_file = base64.b64decode(encoded_str)
    except Exception as e:
        print(f"Exception: {e}")
        return False

    return decoded_file

def unzip_file(in_path, out_path):
    with zipfile.ZipFile(in_path, 'r') as f:
        f.extractall(out_path)

if __name__ == "__main__":
    file_b64_str = {{ content }}

    # b64 string to file
    decoded_file = decode_file(file_b64_str)

    with open(zip_enc_file_path, 'wb') as f:
        f.write(decoded_file)

    # unzip file
    unzip_file(zip_enc_file_path, dst_dir)

"""

FETCH_FILE_TEMPLATE = """"\
#!/bin/bash

{{ command }}

"""

def _render_template(template: str, context: Dict) -> Union[Tuple[str, None], Tuple[None, str]]:
    """Render specific template based on context dictionary."""
    try:
        jinja_env = Environment()
        jinja_template = jinja_env.from_string(template)
        return jinja_template.render(context)
    except TemplateError as err:
        return None, f"Failed to render profile content. Err: {err}"

def render_exec_command(context: Dict) -> Union[Tuple[str, None], Tuple[None, str]]:
    """Use jinja to render bash script profile with commands generated by Ansible."""
    return _render_template(EXEC_COMMAND_TEMPLATE, context)

def render_put_file(context: Dict) -> Union[Tuple[str, None], Tuple[None, str]]:
    """Use jinja to render python script profile needed to move files from local to host."""
    return _render_template(PUT_FILE_TEMPLATE, context)

def render_fetch_file(context: Dict) -> Union[Tuple[str, None], Tuple[None, str]]:
    """Use jinja to render python script profile needed to move files form host to local."""
    return _render_template(FETCH_FILE_TEMPLATE, context)